#!/bin/bash

bin="$1"

if [ -z "${bin}" ]; then
  bin=`dirname $0`
  bin=`cd ${bin} && pwd`
fi

if [ -z "$HTOOL_HOME" ]; then
  export HTOOL_HOME=${bin}/..
fi

HTOOL_CONF_DIR=${HTOOL_CONF_DIR:-${HTOOL_HOME}/conf}

if [ -f "${HTOOL_CONF_DIR}/htool-env.sh" ]; then
  . "${HTOOL_CONF_DIR}/htool-env.sh"
fi

# Find paths to our dependency systems. If they are unset, use CDH defaults.

if [ -z "${HADOOP_COMMON_HOME}" ]; then
  if [ -n "${HADOOP_HOME}" ]; then
    HADOOP_COMMON_HOME=${HADOOP_HOME}
  else
    if [ -d "/usr/lib/hadoop" ]; then
      HADOOP_COMMON_HOME=/usr/lib/hadoop
    else
      HADOOP_COMMON_HOME=${HTOOL_HOME}/../hadoop
    fi
  fi
fi


# We are setting HADOOP_HOME to HADOOP_COMMON_HOME if it is not set
# so that hcat script works correctly on BigTop
if [ -z "${HADOOP_HOME}" ]; then
  if [ -n "${HADOOP_COMMON_HOME}" ]; then
     HADOOP_HOME=${HADOOP_COMMON_HOME}
     export HADOOP_HOME
  fi
fi

# Check: If we can't find our dependencies, give up here.
if [ ! -d "${HADOOP_COMMON_HOME}" ]; then
  echo "Error: $HADOOP_COMMON_HOME does not exist!"
  echo 'Please set $HADOOP_COMMON_HOME to the root of your Hadoop installation.'
  exit 1
fi

if [ ! -d "${HIVE_HOME}" ]; then
  echo "Error: $HIVE_HOME does not exist!"
  echo 'Please set $HIVE_HOME to the root of your Hive installation.'
  exit 1
fi


# Where to find the main htool jar
HTOOL_JAR_DIR=$HTOOL_HOME

# If there's a "build" subdir, override with this, so we use
# the newly-compiled copy.
if [ -d "$HTOOL_JAR_DIR/build" ]; then
  HTOOL_JAR_DIR="${HTOOL_JAR_DIR}/build"
fi

function add_to_classpath() {
  dir=$1
  for f in $dir/*.jar; do
    HTOOL_CLASSPATH=${HTOOL_CLASSPATH}:$f;
  done

  export HTOOL_CLASSPATH
}

# Add htool dependencies to classpath.
HTOOL_CLASSPATH=""
if [ -d "$HTOOL_HOME/lib" ]; then
  add_to_classpath $HTOOL_HOME/lib
fi

HTOOL_CLASSPATH="${HTOOL_CONF_DIR}:${HTOOL_CLASSPATH}:${HIVE_CONF_DIR}:${HIVE_HOME}/lib/*"

add_to_classpath ${HTOOL_JAR_DIR}

HADOOP_CLASSPATH="${HTOOL_CLASSPATH}:${HADOOP_CLASSPATH}"
if [ ! -z "$HTOOL_USER_CLASSPATH" ]; then
  # User has elements to prepend to the classpath, forcibly overriding
  # htool's own lib directories.
  export HADOOP_CLASSPATH="${HTOOL_USER_CLASSPATH}:${HADOOP_CLASSPATH}"
fi

export HTOOL_CLASSPATH
export HTOOL_CONF_DIR
export HTOOL_JAR_DIR
export HADOOP_CLASSPATH
export HADOOP_COMMON_HOME
